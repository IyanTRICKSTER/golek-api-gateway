server {
  
	error_page 400 /400.json;
	location = /400.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 400 '{"status": false, "status_code": -1, "message": "Bad Request", "data": null}';
	}

	error_page 401 /401.json;
	location = /401.json {
	    include /etc/nginx/conf.d/headers.conf;
	    return 401 '{"status": false, "status_code": -1, "message": "Unauthorized", "data": null}';
	}

	error_page 402 /402.json;
	location = /402.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 402 '{"status": false, "status_code": -1, "message": "Payment Required", "data": null}';
	}

	error_page 403 /403.json;
	location = /403.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 403 '{"status": false, "status_code": -1, "message": "Forbidden", "data": null}';
	}

	error_page 404 /404.json;
	location = /404.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 404 '{"status": false, "status_code": -1, "message": "Not Found", "data": null}';
	}

	error_page 405 /405.json;
	location = /405.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 405 '{"status": false, "status_code": -1, "message": "Method Not Allowed", "data": null}';
	}

	error_page 406 /406.json;
	location = /406.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 406 '{"status": false, "status_code": -1, "message": "Not Acceptable", "data": null}';
	}

	error_page 407 /407.json;
	location = /407.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 407 '{"status": false, "status_code": -1, "message": "Proxy Authentication Required", "data": null}';
	}

	error_page 408 /408.json;
	location = /408.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 408 '{"status": false, "status_code": -1, "message": "Request Timeout", "data": null}';
	}

	error_page 409 /409.json;
	location = /409.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 409 '{"status": false, "status_code": -1, "message": "Conflict", "data": null}';
	}

	error_page 410 /410.json;
	location = /410.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 410 '{"status": false, "status_code": -1, "message": "Gone", "data": null}';
	}

	error_page 411 /411.json;
	location = /411.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 411 '{"status": false, "status_code": -1, "message": "Length Required", "data": null}';
	}

	error_page 412 /412.json;
	location = /412.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 412 '{"status": false, "status_code": -1, "message": "Precondition Failed", "data": null}';
	}

	error_page 413 /413.json;
	location = /413.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 413 '{"status": false, "status_code": -1, "message": "Payload Too Large", "data": null}';
	}

	error_page 414 /414.json;
	location = /414.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 414 '{"status": false, "status_code": -1, "message": "URI Too Long", "data": null}';
	}

	error_page 415 /415.json;
	location = /415.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 415 '{"status": false, "status_code": -1, "message": "Unsupported Media Type", "data": null}';
	}

	error_page 416 /416.json;
	location = /416.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 416 '{"status": false, "status_code": -1, "message": "Range Not Satisfiable", "data": null}';
	}

	error_page 417 /417.json;
	location = /417.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 417 '{"status": false, "status_code": -1, "message": "Expectation Failed", "data": null}';
	}

	error_page 418 /418.json;
	location = /418.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 418 '{"status": false, "status_code": -1, "message": "I\'m a Teapot", "data": null}';
	}

	error_page 421 /421.json;
	location = /421.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 421 '{"status": false, "status_code": -1, "message": "Misdirected Request", "data": null}';
	}

	error_page 422 /422.json;
	location = /422.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 422 '{"status": false, "status_code": -1, "message": "Unprocessable Entity", "data": null}';
	}

	error_page 423 /423.json;
	location = /423.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 423 '{"status": false, "status_code": -1, "message": "Locked", "data": null}';
	}

	error_page 424 /424.json;
	location = /424.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 424 '{"status": false, "status_code": -1, "message": "Failed Dependency", "data": null}';
	}

	error_page 425 /425.json;
	location = /425.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 425 '{"status": false, "status_code": -1, "message": "Too Early", "data": null}';
	}

	error_page 426 /426.json;
	location = /426.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 426 '{"status": false, "status_code": -1, "message": "Upgrade Required", "data": null}';
	}

	error_page 428 /428.json;
	location = /428.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 428 '{"status": false, "status_code": -1, "message": "Precondition Required", "data": null}';
	}

	error_page 429 /429.json;
	location = /429.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 429 '{"status": false, "status_code": -1, "message": "Too Many Requests", "data": null}';
	}

	error_page 431 /431.json;
	location = /431.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 431 '{"status": false, "status_code": -1, "message": "Request Header Fields Too Large", "data": null}';
	}
	    
	error_page 451 /451.json;
	location = /451.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 451 '{"status": false, "status_code": -1, "message": "Unavailable For Legal Reasons", "data": null}';
	}

	error_page 500 /500.json;
	location = /500.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 500 '{"status": false, "status_code": -1, "message": "Internal Server Error", "data": null}';
	}

	error_page 501 /501.json;
	location = /501.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 501 '{"status": false, "status_code": -1, "message": "Not Implemented", "data": null}';
	}

	error_page 502 /502.json;
	location = /502.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 502 '{"status": false, "status_code": -1, "message": "Bad Gateway", "data": null}';
	}

	error_page 503 /503.json;
	location = /503.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 503 '{"status": false, "status_code": -1, "message": "Service Unavailable", "data": null}';
	}

	error_page 504 /504.json;
	location = /504.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 504 '{"status": false, "status_code": -1, "message": "Gateway Timeout", "data": null}';
	}

	error_page 505 /505.json;
	location = /505.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 505 '{"status": false, "status_code": -1, "message": "HTTP Version Not Supported", "data": null}';
	}

	error_page 506 /506.json;
	location = /506.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 506 '{"status": false, "status_code": -1, "message": "Variant Also Negotiates", "data": null}';
	}

	error_page 507 /507.json;
	location = /507.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 507 '{"status": false, "status_code": -1, "message": "Insufficient Storage", "data": null}';
	}

	error_page 508 /508.json;
	location = /508.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 508 '{"status": false, "status_code": -1, "message": "Loop Detected", "data": null}';
	}

	error_page 510 /510.json;
	location = /510.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 510 '{"status": false, "status_code": -1, "message": "Not Extended", "data": null}';
	}

	error_page 511 /511.json;
	location = /511.json {
		include /etc/nginx/conf.d/headers.conf;
	    return 511 '{"status": false, "status_code": -1, "message": "Network Authentication Required", "data": null}';
	}


    listen 80;

    server_name gateway.golek.api;
    
    proxy_intercept_errors on;
   
    location = /introspect_token {
        internal;
        
        proxy_method GET;
        proxy_pass http://172.53.1.3:8087/api/auth/introspect;
        
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Original-Remote-Addr $remote_addr;
        proxy_set_header X-Original-Host $host;
        proxy_set_header X-Target-Resource $target_resource;    
    }

    location /auth/ {
        proxy_pass http://172.53.1.3:8087/api/auth/;
    }
    
    location /auth/refresh {

	if ($request_method = 'OPTIONS') {
	    include /etc/nginx/conf.d/headers.conf;
	    return 204;
	}
	
	  
      	set $target_resource "auth";
        
        #Set Mandatory Header from introspect token response
        auth_request_set $user_id $sent_http_x_user_id;
        auth_request_set $user_role $sent_http_x_user_role;
        auth_request_set $user_permissions $sent_http_x_user_permission;
        auth_request_set $user_name $sent_http_x_user_name;
        
        #Remove mandatory request header from client request
        #to prevent a client bypassing authorization mechanism
        proxy_set_header X-User-Id "";
        proxy_set_header X-User-Role "";
        proxy_set_header X-User-Permission "";
        proxy_set_header X-User-Name "";
        proxy_set_header X-User-Major "";
        
        #Set required request header by upstream server
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Original-Remote-Addr $remote_addr;
        proxy_set_header X-Original-Host $host;
        proxy_set_header X-User-Id $user_id;
        proxy_set_header X-User-Name $user_name;
        proxy_set_header X-User-Role $user_role;
        proxy_set_header X-User-Permission $user_permissions;
        
        #Set upstream target
        proxy_pass http://172.53.1.3:8087/api/auth/refresh;
    }


    location /user/ {
    
	if ($request_method = 'OPTIONS') {
	    include /etc/nginx/conf.d/headers.conf;
	    return 204;
	}
	
	#Target Resource or Service
        set $target_resource "user";

        #Authenticate Request
        auth_request /introspect_token;
        
        #Set Mandatory Header from introspect token response
        auth_request_set $user_id $sent_http_x_user_id;
        auth_request_set $user_name $sent_http_x_user_name;
        auth_request_set $user_role $sent_http_x_user_role;
        auth_request_set $user_permissions $sent_http_x_user_permission;
        proxy_pass http://172.53.1.3:8087/api/user/;

        #Remove mandatory request header from client request
        #to prevent a client bypassing authorization mechanism
        proxy_set_header X-User-Id "";
        proxy_set_header X-User-Role "";
        proxy_set_header X-User-Permission "";
        proxy_set_header X-User-Name "";
        proxy_set_header X-User-Major "";

        #Set required request header by upstream server
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Original-Remote-Addr $remote_addr;
        proxy_set_header X-Original-Host $host;
        proxy_set_header X-User-Id $user_id;
        proxy_set_header X-User-Name $user_name;
        proxy_set_header X-User-Role $user_role;
        proxy_set_header X-User-Permission $user_permissions;
        
    }
    
    location /posts {

	if ($request_method = 'OPTIONS') {
	    include /etc/nginx/conf.d/headers.conf;
	    return 204;
	}
  	
  	#Target Resource or Service
	set $target_resource "posts";

        #Authenticate Request
        auth_request /introspect_token;
        
        #Set Mandatory Header from introspect token response
        auth_request_set $user_id $sent_http_x_user_id;
        auth_request_set $user_role $sent_http_x_user_role;
        auth_request_set $user_permissions $sent_http_x_user_permission;
        auth_request_set $user_name $sent_http_x_user_name;
        auth_request_set $user_major $sent_http_x_user_major;
        
        proxy_pass http://172.53.1.9:8088/api/posts;

        #remove forbidden request header from client request
        #to prevent a client bypassing authorization mechanism
        proxy_set_header X-User-Id "";
        proxy_set_header X-User-Role "";
        proxy_set_header X-User-Permission "";
        proxy_set_header X-User-Name "";
        proxy_set_header X-User-Major "";

        #Set required request header by upstream server
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Original-Remote-Addr $remote_addr;
        proxy_set_header X-Original-Host $host;
        proxy_set_header X-User-Id $user_id;
        proxy_set_header X-User-Role $user_role;
        proxy_set_header X-User-Permission $user_permissions;
        proxy_set_header X-User-Name $user_name;
        proxy_set_header X-User-Major $user_major;
    }

    location /bookmark/ {
        
        set $target_resource "bookmark";
        auth_request /introspect_token;
        auth_request_set $user_id $sent_http_x_user_id;
        auth_request_set $user_role $sent_http_x_user_role;
        auth_request_set $user_permissions $sent_http_x_user_permission;
        
        proxy_pass http://172.53.1.12:8089/api/bookmark/;

        #remove request header from client's request
        #to prevent a client bypassing authorization mechanism
        proxy_set_header X-User-Id "";
        proxy_set_header X-User-Role "";
        proxy_set_header X-User-Permission "";
        #########################################
        
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Original-Remote-Addr $remote_addr;
        proxy_set_header X-Original-Host $host;
        proxy_set_header X-User-Id $user_id;
        proxy_set_header X-User-Role $user_role;
        proxy_set_header X-User-Permission $user_permissions;
    }

}
